{"version":3,"sources":["components/HomePageIntro.tsx","components/HomePageAbout.tsx","components/HomePageContact.tsx","components/HomePage.tsx","utilities/handleAPI.ts","utilities/handleColors.ts","utilities/generalUtil.ts","components/WebpageSnap.tsx","components/TimelineButtons.tsx","components/Timeline.tsx","components/TimelineFilter.tsx","components/TimelinePage.tsx","components/DesignPage.tsx","components/NavBar.tsx","components/App.tsx","serviceWorker.ts","index.tsx","assets/Code-Placeholder.png","assets/Headshot1.jpg"],"names":["HomePageIntro","render","className","id","Card","CardContent","Tooltip","title","Fab","color","component","Link","to","Component","HomePageAbout","src","PersonalPortrait","alt","HomepageContact","href","target","DesignPage","getGenAPI","a","username","repoList","sessionStorage","getItem","repoJson","JSON","parse","lucashzhangRepoGeneral","console","log","fetch","response","json","setItem","stringify","map","item","name","description","created","Date","language","url","homepage","sort","b","assignColors","uniqLang","colorDict","lang","length","selectColors","colorNum","colors","getDevIcon","desc","text","formatted","toLowerCase","charAt","toUpperCase","slice","newName","correctLangName","devIcon","indexOf","getUniqLang","langList","repo","concat","includes","push","getFromDesc","filter","v","i","lastIndexOf","WebpageSnap","handleUserContent","props","match","controls","placeholder","snapImgURL","this","TimelineButtons","website","github","Timeline","repos","Provider","value","layout","LangIcon","contentStyle","background","contentArrowStyle","borderRight","langColors","date","dateClassName","icon","iconStyle","key","TimelineFilter","prop","componentDidMount","checkBoxes","forEach","setState","checkBox","onCheckChange","e","state","checked","toRemove","Object","keys","include","handleIncludeChange","onFieldChange","handleFieldChange","TextField","fullWidth","label","variant","onChange","FormControl","Grid","container","alignItems","justify","FormGroup","row","FormControlLabel","labelPlacement","control","Checkbox","style","TimelinePage","newLangs","newColors","includedRepo","langs","query","filterString","tempRepos","handleRemoveRepos","getFilteredRepos","filteredRepos","NavBar","prevProps","location","window","scrollTo","AppBar","position","Tabs","pathname","textColor","indicatorColor","Tab","App","path","componenet","HomePage","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.3834d759.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, CardContent, Tooltip, Fab } from '@material-ui/core';\nimport { Link } from \"react-router-dom\";\nimport { FaLaptopCode, FaPalette } from 'react-icons/fa';\nimport '../css/HomePageIntro.css';\n\nexport interface Prop {\n}\n\nexport interface State {\n}\n\nclass HomePageIntro extends Component<Prop, State> {\n\n    render = () => {\n        return <div className=\"homepage-section homepage-section-body\" id=\"introductions\">\n            <div className=\"homepage-introduction\">\n                <h3 className=\"homepage-section-title\">Welcome to My Page!</h3>\n                <Card className=\"homepage-content\">\n                    <CardContent>\n                        <p>\n                            Hello, my name is Lucas Zhang, and thank you for coming to my personal website!\n                            This page is a compilation of all of my projects, both in programming and in other fields.\n                            It uses the Github API to update itself, so it should always hold some of my most recent works.\n                            I hope you enjoy your time here!\n                        </p>\n                    </CardContent>\n                </Card>\n            </div>\n            <h3 className=\"homepage-content homepage-subtitle\">Navigating my site</h3>\n            <div className=\"homepage-nav-group\">\n                <Card className=\"homepage-content homepage-nav homepage-half\">\n                    <Tooltip title=\"To the Programming Page\">\n                        <Fab color=\"primary\" component={Link} to=\"/programming\">\n                            <FaLaptopCode></FaLaptopCode>\n                        </Fab>\n                    </Tooltip>\n                    <CardContent>\n                        <h3>Programming</h3>\n                        <p>\n                            This is the page where you'll find most of my programming projects\n                            along with links to the repositories and project sites.\n                        </p>\n                    </CardContent>\n                </Card>\n\n                <Card className=\"homepage-content homepage-nav homepage-half\">\n                    <Tooltip title=\"To the Design Page\">\n                        <Fab color=\"secondary\" component={Link} to=\"/design\">\n                            <FaPalette></FaPalette>\n                        </Fab>\n                    </Tooltip>\n                    <CardContent>\n                        <h3>Design</h3>\n                        <p>\n                            This is page is still a work in progress. It's even questionable whether this\n                            page will be solely reserved for design.\n                        </p>\n                    </CardContent>\n                </Card>\n            </div>\n        </div>\n    }\n}\n\nexport default HomePageIntro;","import React, { Component } from 'react';\nimport { Card, CardContent, Button } from '@material-ui/core';\nimport PersonalPortrait from '../assets/Headshot1.jpg';\nimport '../css/HomePageAbout.css';\n\nexport interface Prop {\n}\n\nexport interface State {\n}\n\nclass HomePageAbout extends Component<Prop, State> {\n\n    render = () => {\n        return <div className=\"homepage-section\" id=\"about\">\n            <h3 className=\"homepage-section-title\">About Me</h3>\n            <div className=\"homepage-section-body\">\n                <div className=\"homepage-half\">\n                    <Card className=\"homepage-content\" id=\"portrait\">\n                        <CardContent>\n                            <img src={PersonalPortrait} alt=\"A Portrait of Me!\" />\n                        </CardContent>\n                    </Card>\n                </div>\n                <div className=\"homepage-half\">\n                    <div className=\"homepage-about\">\n                        <Card className=\"homepage-content\">\n                            <CardContent>\n                                <h3>College</h3>\n                                <p>\n                                    Currently, I'm a Computer Science Major at the University of North Carolina Chapel Hill.\n                                    I'm also pursuing two minors in Statistics and Studio Art, respectively.\n                                </p>\n                            </CardContent>\n                        </Card>\n                        <Card className=\"homepage-content\">\n                            <CardContent>\n                                <h3>Interests</h3>\n                                <p>\n                                    Some of my favorite things to do involve Digital Media.\n                                    I really enjoy working in programs like Adobe Illustrator and Photoshop.\n                                    I'm particularly like Web Development since it represents a nexus of my interests.\n                                </p>\n                            </CardContent>\n                        </Card>\n                        <Card className=\"homepage-content\">\n                            <CardContent>\n                                <h3>Activities</h3>\n                                <p>\n                                    Right now, I'm the design executive chair/design director of the Carolina Analytics and Data Science Club and Carolina Data Challenge hackathon.\n                                    These organizations helped me meet many peers and friends who share my interests.\n                                </p>\n                            </CardContent>\n                        </Card>\n                    </div>\n                </div>\n            </div>\n            {/* <div className=\"homepage-section-body\" id=\"about-resume\">\n                <h3 className=\"homepage-content homepage-subtitle\">My Resume</h3>\n                <Button variant=\"contained\" color=\"secondary\" href='../assets/Resume_Lucas.pdf'>\n                    See my resume\n                </Button>\n            </div> */}\n        </div>\n    }\n}\n\nexport default HomePageAbout;","import React, { Component } from 'react';\nimport { Tooltip, Fab } from '@material-ui/core';\nimport { FaLinkedin, FaEnvelope } from 'react-icons/fa';\nimport '../css/HomePageContact.css';\n\nexport interface Prop {\n}\n\nexport interface State {\n}\n\nclass HomepageContact extends Component<Prop, State> {\n\n    render = () => {\n        return <div className=\"homepage-section\" id=\"contact\">\n            <h3 className=\"homepage-section-title\">Contact Me</h3>\n            <div className=\"homepage-section-body homepage-contact-fabs\">\n                <Tooltip title=\"My Linkedin\">\n                    <Fab color=\"primary\" href=\"https://www.linkedin.com/in/lucashzhang\" target=\"_blank\">\n                        <FaLinkedin></FaLinkedin>\n                    </Fab>\n                </Tooltip>\n                <Tooltip title=\"My Email\">\n                    <Fab color=\"primary\" href=\"mailto:lhzhang@live.unc.edu\">\n                        <FaEnvelope></FaEnvelope>\n                    </Fab>\n                </Tooltip>\n            </div>\n        </div>\n    }\n}\n\nexport default HomepageContact;","import React, { Component } from 'react';\nimport HomePageIntro from './HomePageIntro';\nimport HomePageAbout from './HomePageAbout';\nimport HomePageContact from './HomePageContact';\nimport '../css/HomePage.css';\n\nexport interface Prop {\n    buttonClick: Function\n}\n\nexport interface State {\n}\n\nclass DesignPage extends Component<Prop, State> {\n\n    render = () => {\n        return <div className=\"lucas-page\">\n            <div className=\"homepage-home homepage-section\">\n                <h3 className=\"homepage-big-text\">Hi, I'm Lucas Zhang</h3>\n            </div>\n            <HomePageIntro></HomePageIntro>\n            <hr className=\"homepage-divider\"/>\n            <HomePageAbout></HomePageAbout>\n            <hr className=\"homepage-divider\"/>\n            <HomePageContact></HomePageContact>\n            \n        </div>\n    }\n}\n\nexport default DesignPage;","export interface RepoInfo {\n    name: string\n    id: number\n    description: string\n    created: Date\n    language: string\n    url: string\n    homepage: string\n}\n\nexport async function getGenAPI() {\n    let username: string = 'lucashzhang';\n    let response: any;\n    let repoJson: any;\n    let repoList: RepoInfo[] = [];\n\n    if (sessionStorage.getItem('lucashzhangRepoGeneral')) {\n        repoJson = JSON.parse(sessionStorage.lucashzhangRepoGeneral);\n        console.log('Session Storage')\n    } else {\n        try {\n            response = await fetch('https://api.github.com/users/' + username + '/repos');\n            repoJson = await response.json();\n            sessionStorage.setItem('lucashzhangRepoGeneral', JSON.stringify(repoJson));\n            console.log('API Call');\n        } catch (error) {\n            console.log(error);\n            // TODO-- incorporate getting data from local storage\n            return null;\n        }\n    }\n\n    try {\n        repoList = repoJson.map((item: any) => ({\n            name: item['name'],\n            id: item['id'],\n            description: item['description'],\n            created: new Date(item['created_at']),\n            language: item['language'],\n            url: item['html_url'],\n            homepage: item['homepage']\n        }));\n    } catch (error) {\n        console.log(error);\n        console.log(\"The list of repositories failed to build, \\nthis was most likely caused by too many API calls\")\n        return null;\n    }\n\n    repoList.sort((a, b) => {\n        if (a['created'] > b['created']) {\n            return -1;\n        } else {\n            return 1;\n        }\n    })\n\n    return repoList;\n\n}","export function assignColors(uniqLang: string[]) {\n    let colorDict: { [index: string]: any; } = {};\n\n    //Goes through every other one in order so colors that are too similar aren't next to each other\n\n    for (let lang = 0; lang < uniqLang.length; lang+=2) {\n        let currLang: string = uniqLang[lang];\n        colorDict[currLang] = selectColors(lang, uniqLang.length);\n    }\n\n    for (let lang = 1; lang < uniqLang.length; lang+=2) {\n        let currLang: string = uniqLang[lang];\n        colorDict[currLang] = selectColors(lang, uniqLang.length);\n    }\n\n    return colorDict;\n}\n\nfunction selectColors(colorNum: any, colors: any) {\n    if (colors < 1) colors = 1; // defaults to one color - avoid divide by zero\n    return \"hsl(\" + (colorNum * (360 / colors) % 360) + \",60%,45%)\";\n}","import * as devIcon from 'react-icons/di';\nimport { RepoInfo } from './handleAPI';\n\nexport function shuffle(array: any[]) {\n    for (let i: number = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i)\n        const temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n    }\n\n    return array;\n}\n\nexport function capitalFirst(text: string) {\n    text = text.toLowerCase();\n    let capitalized: string = text.charAt(0).toUpperCase() + text.slice(1);\n\n    return capitalized;\n}\n\nexport function getDevIcon(name: string, desc: string) {\n    let LangIcon: any;\n    let formatted = `Di${capitalFirst(name)}`\n    formatted = correctLangName(formatted);\n\n    if (formatted in devIcon) {\n        LangIcon = devIcon[formatted as keyof typeof devIcon];\n    } else if (desc.toLowerCase().indexOf('react') >= 0) {\n        LangIcon = devIcon['DiReact'];\n    } else if (desc.toLowerCase().indexOf('angular') >= 0) {\n        LangIcon = devIcon['DiAngularSimple'];\n    } else {\n        LangIcon = devIcon['DiVisualstudio']\n    }\n\n    return LangIcon;\n}\n\nfunction correctLangName(name: string) {\n    let newName: string;\n    switch (name) {\n        case 'DiJavascript': {\n            newName = 'DiJavascript1'\n            break;\n        }\n        case 'DiHtml': {\n            newName = 'DiHtml5'\n            break;\n        }\n        default: {\n            newName = name;\n            break;\n        }\n    }\n\n    return newName;\n}\n\nexport function getUniqLang(repoList: RepoInfo[]) {\n    let langList: string[] = repoList.map((repo: RepoInfo) => (`${repo.language}`));\n    langList = langList.concat(getFromDesc(repoList))\n    let uniqLang: string[] = langList.filter((v, i) => { return i === langList.lastIndexOf(v); });\n    \n    return uniqLang;\n}\n\nfunction getFromDesc(repoList: RepoInfo[]) {\n    // These are all of the languages and frameworks that I currently know\n    // Unfortunately, these will have to be manually updated over time\n    let known = [\n        'C',\n        'ReactJS',\n        'Angular',\n        'Java',\n        'Java Swing',\n        'JavaScript ',\n        'TypeScript ',\n        'Python',\n        'Flutter',\n        'Dart',\n        'HTML',\n        'CSS',\n    ]\n\n    let langList: string[] = []; \n    for (let lang of known) {\n        for (let repo of repoList) {\n            if (repo.description != null && repo.description.toLowerCase().includes(`${lang.toLowerCase()} ` || `${lang.toLowerCase()}.`)) {\n                langList.push(`${lang}`);\n                break;\n            }\n        }\n    }\n\n    return langList;\n}\n","import React, { Component } from 'react';\nimport '../css/WebpageSnap.css'\nimport placeholder from '../assets/Code-Placeholder.png'\n\ninterface Prop {\n    url: string\n}\n\ninterface State {\n\n}\n\nclass WebpageSnap extends Component<Prop, State> {\n\n    handleUserContent = () => {\n        if (this.props.url.match(/\\.(jpeg|jpg|gif|png)$/) != null) {\n            return <img className=\"timeline-visual\" src={this.props.url} alt=\"Screenshot from project\" />;\n        } else if (this.props.url.includes('.mp4')) {\n            return <video className=\"timeline-visual\" src={this.props.url} controls></video>\n        } else {\n            return <img className=\"timeline-visual\" src={placeholder} alt=\"Placeholder screenshot of timeline code\" />;\n        }\n    }\n\n    render() {\n\n        const apiURL: string = 'https://api.apiflash.com/v1/urltoimage?access_key=81b584f60fb2444db5beb297443320db&ttl=2592000&url=';\n        const userContent: string = \"raw.githubusercontent.com/\";\n        const snapImgURL: string = apiURL + this.props.url;\n\n        if (this.props.url != null && this.props.url.length > 0) {\n            if (this.props.url.includes(userContent)) {\n                return this.handleUserContent();\n            }\n            return <img className=\"timeline-visual\" src={snapImgURL} alt=\"Screenshot of Project Webpage\" />\n        } else {\n            return <img className=\"timeline-visual\" src={placeholder} alt=\"Placeholder screenshot of timeline code\" />;\n        }\n    }\n}\n\nexport default WebpageSnap;\n","import React, { Component } from 'react';\nimport { Tooltip, Fab } from '@material-ui/core';\nimport { FaGithub, FaLink } from 'react-icons/fa';\nimport '../css/TimelineButtons.css';\n\nexport interface Prop {\n    color: string\n    github: string\n    website: string\n}\n\nexport interface State {\n}\n\nclass TimelineButtons extends Component<Prop, State> {\n\n    render = () => {\n        let website: string = \"\"\n        if (this.props.website != null && !this.props.website.includes('raw.githubusercontent.com')) {\n            website = this.props.website;\n        }\n        return <div className=\"timeline-button-container\">\n            <Tooltip title=\"Github Repository\">\n                <Fab color=\"primary\" href={this.props.github} target=\"repoGithub\">\n                    <FaGithub></FaGithub>\n                </Fab>\n            </Tooltip>\n            {website.length > 0 ? <Tooltip title=\"Website Link\">\n                <Fab color=\"primary\" href={website} target=\"repoWebpage\">\n                    <FaLink></FaLink>\n                </Fab>\n            </Tooltip> : null}\n        </div>\n    }\n}\n\nexport default TimelineButtons;","import React, { Component } from 'react';\nimport { RepoInfo } from '../utilities/handleAPI';\nimport { getDevIcon } from '../utilities/generalUtil';\nimport { IconContext } from 'react-icons';\nimport { VerticalTimeline, VerticalTimelineElement } from 'react-vertical-timeline-component';\nimport WebpageSnap from './WebpageSnap'\nimport TimelineButtons from './TimelineButtons'\nimport 'react-vertical-timeline-component/style.min.css';\nimport '../css/Timeline.css'\n\nexport interface Prop {\n    repos: RepoInfo[]\n    langColors: { [index: string]: any; }\n}\n\nexport interface State {\n\n}\n\nclass Timeline extends Component<Prop, State> {\n\n    render = () => {\n        let repos = this.props.repos;\n        return (\n            repos.length > 0 ? <IconContext.Provider value={{ color: \"white\", className: \"global-class-name\" }}>\n                <VerticalTimeline layout={'1-column'}>\n                    {this.props.repos.map((repo: RepoInfo) => {\n\n                        const LangIcon: any = getDevIcon(repo.language, repo.description);\n\n                        return <VerticalTimelineElement\n                            className=\"vertical-timeline-element--work\"\n                            contentStyle={{ background: '#fffff', color: '#efefef' }}\n                            contentArrowStyle={{ borderRight: `7px solid  ${this.props.langColors[repo.language]}` }}\n                            date={`Created: ${repo.created}`}\n                            dateClassName=\"timeline-date\"\n                            icon={<LangIcon />}\n                            iconStyle={{ background: `${this.props.langColors[repo.language]}`, color: '#efefef' }}\n                            key={repo.id}\n                        >\n                            <div className=\"timeline-body\">\n                                <div className=\"timeline-half\">\n                                    <WebpageSnap url={repo.homepage} />\n                                </div>\n                                <div className=\"timeline-text timeline-half\">\n                                    <div>\n                                        <h3>{repo.name}</h3>\n                                        <h4>Primary Language: {repo.language}</h4>\n                                        <p>{repo.description}</p>\n                                    </div>\n                                    <TimelineButtons\n                                        color={this.props.langColors[repo.language]}\n                                        github={repo.url}\n                                        website={repo.homepage}>                                        \n                                    </TimelineButtons>\n                                </div>\n                            </div>\n                        </VerticalTimelineElement>\n                    })}\n                </VerticalTimeline>\n            </IconContext.Provider> : null\n        );\n    }\n}\n\nexport default Timeline;","import React, { Component } from 'react';\nimport { Grid, Card, CardContent, TextField, Checkbox, FormControl, FormControlLabel, FormGroup } from '@material-ui/core';\nimport '../css/TimelineFilter.css'\n\nexport interface Prop {\n    langList: string[]\n    langColors: { [index: string]: any; }\n    handleFieldChange: Function;\n    handleIncludeChange: Function;\n}\n\nexport interface State {\n    checkBox: { [index: string]: boolean; }\n}\n\nclass TimelineFilter extends Component<Prop, State> {\n\n    constructor(prop: Prop) {\n        super(prop);\n        this.state = {\n            checkBox: {}\n        }\n    }\n\n    componentDidMount = () => {\n\n        let checkBoxes: { [index: string]: any; } = {};\n        //Initializes all checkboxes to be checked\n        this.props.langList.forEach((lang: string) => {\n            checkBoxes[lang] = true\n        });\n\n        this.setState({\n            checkBox: checkBoxes\n        })\n\n    }\n\n    onCheckChange = (e: any) => {\n\n        let checkBoxes: { [index: string]: boolean; } = this.state.checkBox;\n        checkBoxes[e.target.name] = e.target.checked;\n        this.setState({\n            checkBox: checkBoxes\n        })\n        // gives list of which check boxes are unchecked\n        let toRemove: string[] = Object.keys(checkBoxes).filter((include: string) => {\n            return !checkBoxes[include]\n        })\n        this.props.handleIncludeChange(toRemove);\n    }\n\n    onFieldChange = (e: any) => {\n\n        this.props.handleFieldChange(e.target.value)\n    }\n\n    render = () => {\n\n        return (\n            <Card className=\"Filter center-column\">\n                <CardContent>\n                    <TextField fullWidth id=\"outlined-basic\" label=\"Search\" variant=\"outlined\" onChange={this.onFieldChange} />\n                    <FormControl fullWidth component=\"fieldset\">\n                        {Object.keys(this.state.checkBox).length > 0 ? <Grid container alignItems=\"center\" justify=\"center\">\n                            <FormGroup row>\n                                {this.props.langList.map((lang: string) => (\n                                    <Grid item key={lang} >\n                                        <FormControlLabel labelPlacement=\"top\" control={\n                                            <Checkbox style={{\n                                                color: this.props.langColors[lang],\n                                            }} checked={this.state.checkBox[lang]}\n                                                name={lang}\n                                                onChange={this.onCheckChange}\n                                            />\n                                        } label={lang} />\n                                    </Grid>\n                                ))}\n                            </FormGroup>\n                        </Grid> : null}\n                    </FormControl>\n\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\nexport default TimelineFilter;","import React, { Component } from 'react';\nimport { RepoInfo, getGenAPI } from '../utilities/handleAPI';\nimport { assignColors } from '../utilities/handleColors';\nimport { getUniqLang } from '../utilities/generalUtil';\nimport Timeline from './Timeline';\nimport TimelineFilter from './TimelineFilter';\nimport '../css/TimelinePage.css'\n\nexport interface Prop {\n}\n\nexport interface State {\n    // Keeps a state of both the complete repo list and the one filtered by the checkboxes\n    // This allows for less repeated processesing\n    repoList: RepoInfo[]\n    includedRepo: RepoInfo[]\n    langs: string[]\n    langColors: { [index: string]: any; }\n    filterString: string\n}\n\nclass TimelinePage extends Component<Prop, State> {\n\n    constructor(props: Prop) {\n        super(props);\n        this.state = {\n            repoList: [],\n            includedRepo: [],\n            langs: [],\n            langColors: {},\n            filterString: \"\",\n        }\n    }\n\n    componentDidMount = async () => {\n\n        let repoList = await getGenAPI();\n\n        if (repoList != null) {\n            let newLangs = getUniqLang(repoList);\n            let newColors = assignColors(newLangs);\n            newLangs = newLangs.sort()\n            this.setState({\n                repoList: repoList,\n                includedRepo: repoList,\n                langs: newLangs,\n                langColors: newColors,\n            });\n        }\n    }\n\n    handleFieldChange = (query: string) => {\n        this.setState({\n            filterString: query.toLowerCase()\n        })\n    }\n\n    handleIncludeChange = (toRemove: string[]) => {\n        let tempRepos: RepoInfo[] = this.state.repoList;\n        // For each language to remove, filter out the repos that include the language\n        for (let lang of toRemove) {\n            tempRepos = this.handleRemoveRepos(tempRepos, lang);\n        }\n\n        this.setState({\n            includedRepo: tempRepos\n        })\n    }\n\n    getFilteredRepos = (repoList: RepoInfo[], filterString: string) => {\n        // Returns a list of repositories that include the string\n        return repoList.filter((repo: RepoInfo) => {\n            return (repo.language.toLowerCase().includes(filterString.toLowerCase())\n                || repo.name.toLowerCase().includes(filterString.toLowerCase())\n                || (repo.description != null && repo.description.toLowerCase().includes(filterString.toLowerCase())))\n        })\n    }\n\n    handleRemoveRepos = (repoList: RepoInfo[], filterString: string) => {\n        // Returns a list of repositories that don't include the string\n        return repoList.filter((repo: RepoInfo) => {\n            return !(repo.language.toLowerCase().includes(`${filterString.toLowerCase()} ` || `${filterString.toLowerCase()}.`)\n                || repo.name.toLowerCase().includes(`${filterString.toLowerCase()} ` || `${filterString.toLowerCase()}.`)\n                || (repo.description != null && repo.description.toLowerCase().includes(`${filterString.toLowerCase()} ` || `${filterString.toLowerCase()}.`)))\n        })\n    }\n\n    render = () => {\n        let filteredRepos = this.getFilteredRepos(this.state.includedRepo, this.state.filterString);\n\n        return <div className=\"lucas-page timeline-page\">\n            {this.state.langs.length > 0 && this.state.langColors ?\n                <TimelineFilter langList={this.state.langs} langColors={this.state.langColors} handleFieldChange={this.handleFieldChange} handleIncludeChange={this.handleIncludeChange}></TimelineFilter>\n                : null}\n            <Timeline repos={filteredRepos} langColors={this.state.langColors} />\n        </div>\n    }\n}\n\nexport default TimelinePage;","import React, { Component } from 'react';\n\nexport interface Prop {\n}\n\nexport interface State {\n}\n\nclass DesignPage extends Component<Prop, State> {\n\n    render = () => {\n        return <div>Design</div>\n    }\n}\n\nexport default DesignPage;","import React, { Component } from 'react';\nimport '../css/App.css';\nimport { Tabs, Tab, AppBar } from '@material-ui/core';\nimport { Link } from \"react-router-dom\";\n\nexport interface Prop {\n    location: any\n}\n\nexport interface State {\n}\n\nclass NavBar extends Component<Prop> {\n\n    componentDidUpdate(prevProps: any) {\n        if (this.props.location !== prevProps.location) {\n            window.scrollTo(0, 0)\n        }\n    }\n\n    render() {\n\n        return (\n            <AppBar position=\"sticky\" color=\"default\">\n                <Tabs value={this.props.location.pathname} textColor=\"secondary\" indicatorColor=\"secondary\" variant=\"fullWidth\">\n                    <Tab label=\"Home\" value=\"/\" component={Link} to=\"/\" />\n                    <Tab label=\"Programming\" value=\"/programming\" component={Link} to=\"/programming\" />\n                    <Tab label=\"Design\" value=\"/design\" component={Link} to=\"/design\" />\n                </Tabs>\n            </AppBar>\n        )\n    }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport '../css/App.css';\nimport HomePage from './HomePage';\nimport TimelinePage from './TimelinePage';\nimport DesignPage from './DesignPage';\nimport NavBar from './NavBar'\n\n\ninterface Prop {\n\n}\n\ninterface State {\n  tabNum: any\n}\n\nclass App extends Component<Prop, State> {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <Route component={NavBar} />\n          <Switch>\n            <Route path=\"/programming\" component={TimelinePage} />\n            <Route path=\"/design\" componenet={DesignPage} />\n            <Route path=\"/\" component={HomePage} />\n          </Switch>\n        </HashRouter>\n        <div id=\"background\"></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Code-Placeholder.4069e7dc.png\";","module.exports = __webpack_public_path__ + \"static/media/Headshot1.5d939f81.jpg\";"],"sourceRoot":""}