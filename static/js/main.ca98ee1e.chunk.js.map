{"version":3,"sources":["utilities/handleAPI.ts","utilities/generalUtil.ts","utilities/handleColors.ts","components/WebpageSnap.tsx","components/Timeline.tsx","components/TimelineFilter.tsx","components/TimelinePage.tsx","components/DesignPage.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["getGenAPI","a","username","repoList","sessionStorage","getItem","repoJson","JSON","parse","lucashzhangRepoGeneral","console","log","fetch","response","json","setItem","stringify","map","item","name","id","description","created","Date","language","contents","homepage","sort","b","getUniqLang","langList","repo","uniqLang","concat","lang","toLowerCase","includes","push","getFromDesc","filter","v","i","lastIndexOf","assignColors","colorDict","array","length","j","Math","floor","random","temp","shuffle","selectColors","colorNum","colors","WebpageSnap","snapImgURL","this","props","url","src","alt","Component","Timeline","repos","Provider","value","color","className","layout","LangIcon","desc","text","formatted","charAt","toUpperCase","slice","newName","correctLangName","devIcon","indexOf","getDevIcon","contentStyle","background","contentArrowStyle","borderRight","langColors","date","dateClassName","icon","iconStyle","key","TimelineFilter","onFieldChange","e","handleChange","target","render","Card","CardContent","TextField","fullWidth","label","variant","onChange","FormControl","component","FormGroup","row","FormControlLabel","control","Checkbox","TimelinePage","resize","context","swipeableViews","slideUpdateHeight","componentDidUpdate","componentDidMount","window","addEventListener","newLangs","newColors","setState","langs","handleFieldChange","query","filterString","getFilteredRepos","state","filteredRepos","contextTypes","PropTypes","object","isRequired","DesignPage","App","prop","handleTabChange","newNum","tabNum","handleSwipeChange","index","AppBar","position","Tabs","indicatorColor","Tab","tabProps","onChangeIndex","animateHeight","enableMouseEvents","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ca98ee1e.chunk.js","sourcesContent":["export interface RepoInfo {\n    name: string\n    id: number\n    description: string\n    created: Date\n    language: string\n    contents: string\n    homepage: string\n}\n\nexport async function getGenAPI() {\n    let username: string = 'lucashzhang';\n    let response: any;\n    let repoJson: any;\n    let repoList: RepoInfo[] = [];\n\n    if (sessionStorage.getItem('lucashzhangRepoGeneral')) {\n        repoJson = JSON.parse(sessionStorage.lucashzhangRepoGeneral);\n        console.log('Session Storage')\n    } else {\n        try {\n            response = await fetch('https://api.github.com/users/' + username + '/repos');\n            repoJson = await response.json();\n            sessionStorage.setItem('lucashzhangRepoGeneral', JSON.stringify(repoJson));\n            console.log('API Call');\n        } catch (error) {\n            console.log(error);\n            // TODO-- incorporate getting data from local storage\n            return null;\n        }\n    }\n\n    try {\n        repoList = repoJson.map((item: any) => ({\n            name: item['name'],\n            id: item['id'],\n            description: item['description'],\n            created: new Date(item['created_at']),\n            language: item['language'],\n            contents: item['contents_url'],\n            homepage: item['homepage']\n        }));\n    } catch (error) {\n        console.log(error);\n        console.log(\"The list of repositories failed to build, \\nthis was most likely caused by too many API calls\")\n        return null;\n    }\n\n    repoList.sort((a, b) => {\n        if (a['created'] > b['created']) {\n            return -1;\n        } else {\n            return 1;\n        }\n    })\n\n    return repoList;\n\n}","import * as devIcon from 'react-icons/di';\nimport { RepoInfo } from './handleAPI';\n\nexport function shuffle(array: any[]) {\n    for (let i: number = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i)\n        const temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n    }\n\n    return array;\n}\n\nexport function capitalFirst(text: string) {\n    text = text.toLowerCase();\n    let capitalized: string = text.charAt(0).toUpperCase() + text.slice(1);\n\n    return capitalized;\n}\n\nexport function getDevIcon(name: string, desc: string) {\n    let LangIcon: any;\n    let formatted = `Di${capitalFirst(name)}`\n    formatted = correctLangName(formatted);\n\n    if (formatted in devIcon) {\n        LangIcon = devIcon[formatted as keyof typeof devIcon];\n    } else if (desc.toLowerCase().indexOf('react') >= 0) {\n        LangIcon = devIcon['DiReact'];\n    } else if (desc.toLowerCase().indexOf('angular') >= 0) {\n        LangIcon = devIcon['DiAngularSimple'];\n    } else {\n        LangIcon = devIcon['DiVisualstudio']\n    }\n\n    return LangIcon;\n}\n\nfunction correctLangName(name: string) {\n    let newName: string;\n    switch (name) {\n        case 'DiJavascript': {\n            newName = 'DiJavascript1'\n            break;\n        }\n        case 'DiHtml': {\n            newName = 'DiHtml5'\n            break;\n        }\n        default: {\n            newName = name;\n            break;\n        }\n    }\n\n    return newName;\n}\n\nexport function getUniqLang(repoList: RepoInfo[]) {\n    let langList: string[] = repoList.map((repo: RepoInfo) => (repo.language));\n    langList = langList.concat(getFromDesc(repoList))\n    let uniqLang: string[] = langList.filter(function (v, i) { return i === langList.lastIndexOf(v); });\n\n    console.log(uniqLang)\n\n    return uniqLang;\n}\n\nfunction getFromDesc(repoList: RepoInfo[]) {\n    // These are all of the languages and frameworks that I currently know\n    // Unfortunately, these will have to be manually updated over time\n    let knownLang = [\n        'C ',\n        'React',\n        'Angular',\n        'Java ',\n        'Java Swing',\n        'JavaScript ',\n        'TypeScript ',\n        'Python',\n        'Flutter',\n        'Dart',\n        'HTML',\n        'CSS',\n    ]\n\n    let langList: string[] = []; \n    for (let lang of knownLang) {\n        for (let repo of repoList) {\n            if (repo.description != null && repo.description.toLowerCase().includes(lang.toLowerCase())) {\n                langList.push(lang);\n                break;\n            }\n        }\n    }\n\n    return langList;\n}\n\n","import { shuffle } from './generalUtil';\n\nexport function assignColors(uniqLang: string[]) {\n    let colorDict: { [index: string]: any; } = {};\n\n    uniqLang = shuffle(uniqLang);\n\n    for (let lang in uniqLang) {\n        let currLang: string = uniqLang[lang];\n        colorDict[currLang] = selectColors(lang, uniqLang.length);\n    }\n\n    return colorDict;\n}\n\nfunction selectColors(colorNum: any, colors: any) {\n    if (colors < 1) colors = 1; // defaults to one color - avoid divide by zero\n    return \"hsl(\" + (colorNum * (360 / colors) % 360) + \",60%,50%)\";\n}","import React, { Component } from 'react';\nimport '../css/WebpageSnap.css'\n\ninterface Prop {\n    url: string\n}\n\ninterface State {\n\n}\n\nclass WebpageSnap extends Component<Prop, State> {\n\n    render() {\n        const apiURL: string = 'https://api.apiflash.com/v1/urltoimage?access_key=81b584f60fb2444db5beb297443320db&ttl=2592000&url=';\n        const snapImgURL: string = apiURL + this.props.url;\n\n        if (this.props.url != null && this.props.url.length > 0) {\n            return <img src={snapImgURL} alt=\"\" />\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default WebpageSnap;\n","import React, { Component } from 'react';\nimport { RepoInfo } from '../utilities/handleAPI';\nimport { getDevIcon } from '../utilities/generalUtil';\nimport { IconContext } from 'react-icons';\nimport { VerticalTimeline, VerticalTimelineElement } from 'react-vertical-timeline-component';\nimport WebpageSnap from './WebpageSnap'\nimport 'react-vertical-timeline-component/style.min.css';\nimport '../css/Timeline.css'\n\nexport interface Prop {\n    repos: RepoInfo[]\n    langColors: { [index: string]: any; }\n}\n\nexport interface State {\n\n}\n\nclass Timeline extends Component<Prop, State> {\n\n    render() {\n        if (this.props.repos.length > 0) {\n            return (\n                <IconContext.Provider value={{ color: \"white\", className: \"global-class-name\" }}>\n                    <VerticalTimeline layout={'1-column'}>\n                        {this.props.repos.map((repo: RepoInfo) => {\n\n                            const LangIcon: any = getDevIcon(repo.language, repo.description);\n\n                            return <VerticalTimelineElement\n                                className=\"vertical-timeline-element--work\"\n                                contentStyle={{ background: '#fffff', color: '#efefef' }}\n                                contentArrowStyle={{ borderRight: `7px solid  ${this.props.langColors[repo.language]}` }}\n                                date={`Created: ${repo.created}`}\n                                dateClassName=\"TimelineDate\"\n                                icon={<LangIcon />}\n                                iconStyle={{ background: `${this.props.langColors[repo.language]}`, color: '#efefef' }}\n                                key={repo.id}\n                            >\n                                <div className=\"TimelineBody\">\n                                    <WebpageSnap url={repo.homepage} />\n                                    <h3>{repo.name}</h3>\n                                    <h4>Primary Language: {repo.language}</h4>\n                                    <p>{repo.description}</p>\n                                </div>\n                            </VerticalTimelineElement>\n                        })}\n                    </VerticalTimeline>\n                </IconContext.Provider>\n            );\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default Timeline;","import React, { Component } from 'react';\nimport { Card, CardContent, TextField, Checkbox, FormControl, FormControlLabel, FormGroup } from '@material-ui/core';\nimport '../css/TimelineFilter.css'\n\nexport interface Prop {\n    langList: string[]\n    langColors: { [index: string]: any; }\n    handleChange: Function;\n}\n\nexport interface State {\n\n}\n\nclass TimelineFilter extends Component<Prop, State> {\n\n    onFieldChange = (e: any) => {\n\n        this.props.handleChange(e.target.value)\n    }\n\n    render = () => {\n\n        return (\n            <Card className=\"Filter\">\n                <CardContent>\n                    <TextField fullWidth id=\"outlined-basic\" label=\"Search\" variant=\"outlined\" onChange={this.onFieldChange} />\n                    <FormControl fullWidth component=\"fieldset\">\n                        <FormGroup row>\n                            {this.props.langList.map((lang: string) => (\n                                <FormControlLabel control={<Checkbox name={lang} />} label={lang} />\n                            ))}\n                        </FormGroup>\n                    </FormControl>\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\nexport default TimelineFilter;","import React, { Component } from 'react';\nimport { RepoInfo, getGenAPI } from '../utilities/handleAPI';\nimport { assignColors } from '../utilities/handleColors';\nimport { getUniqLang } from '../utilities/generalUtil';\nimport Timeline from './Timeline';\nimport TimelineFilter from './TimelineFilter';\nimport PropTypes from 'prop-types';\nimport '../css/TimelinePage.css'\n\nexport interface Prop {\n}\n\nexport interface State {\n    repos: RepoInfo[]\n    langs: string[]\n    langColors: { [index: string]: any; }\n    filterString: string\n}\n\nclass TimelinePage extends Component<Prop, State> {\n\n    constructor(props: Prop) {\n        super(props);\n        this.state = {\n            repos: [],\n            langs: [],\n            langColors: {},\n            filterString: \"\"\n        }\n    }\n\n    static contextTypes = {\n        swipeableViews: PropTypes.object.isRequired,\n    };\n\n    resize = () => {\n        this.context.swipeableViews.slideUpdateHeight();\n    }\n\n    componentDidUpdate = () => {\n        this.resize();\n    }\n\n    componentDidMount = async () => {\n        window.addEventListener(\"resize\", this.resize);\n\n        let repoList = await getGenAPI();\n\n        if (repoList != null) {\n            let newLangs = getUniqLang(repoList);\n            let newColors = assignColors(newLangs);\n            this.setState({\n                repos: repoList,\n                langs: newLangs,\n                langColors: newColors\n            });\n        }\n    }\n\n    handleFieldChange = (query: string) => {\n        this.setState({\n            filterString: query.toLowerCase()\n        })\n    }\n\n    getFilteredRepos = () => {\n        return this.state.repos.filter((repo: RepoInfo) => {\n            return (repo.language.toLowerCase().includes(this.state.filterString)\n            || repo.name.toLowerCase().includes(this.state.filterString)\n            || (repo.description != null && repo.description.toLowerCase().includes(this.state.filterString)))\n        })\n    }\n\n    render = () => {\n        let filteredRepos = this.getFilteredRepos();\n        return <div className=\"Page\">\n            <TimelineFilter langList={this.state.langs} langColors={this.state.langColors} handleChange={this.handleFieldChange}></TimelineFilter>\n            <Timeline repos={filteredRepos} langColors={this.state.langColors} />\n        </div>\n    }\n}\n\nexport default TimelinePage;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport interface Prop {\n}\n\nexport interface State {\n}\n\nclass DesignPage extends Component<Prop, State> {\n\n    constructor(props: Prop) {\n        super(props);\n    }\n\n    static contextTypes = {\n        swipeableViews: PropTypes.object.isRequired,\n    };\n\n    resize = () => {\n        this.context.swipeableViews.slideUpdateHeight();\n    }\n\n    componentDidMount = () => {\n        window.addEventListener(\"resize\", this.resize);\n        this.resize();\n    }\n\n    render = () => {\n        return <div>Design</div>\n    }\n}\n\nexport default DesignPage;","import React, { Component } from 'react';\nimport '../css/App.css';\nimport { Tabs, Tab, AppBar } from '@material-ui/core';\nimport SwipeableViews from 'react-swipeable-views'\nimport TimelinePage from './TimelinePage';\nimport DesignPage from './DesignPage';\n\ninterface Prop {\n\n}\n\ninterface State {\n  tabNum: any\n}\n\nclass App extends Component<Prop, State> {\n\n  constructor(prop: Prop) {\n    super(prop);\n    this.state = {\n      tabNum: 0\n    }\n  }\n\n  tabProps(index: number) {\n    return {\n      id: `full-width-tab-${index}`,\n      'aria-controls': `full-width-tabpanel-${index}`,\n    };\n  }\n\n  handleTabChange = (e: any, newNum: number) => {\n    this.setState({\n      tabNum: newNum\n    })\n    console.log(newNum)\n  }\n\n  handleSwipeChange = (newNum: number) => {\n    this.setState({\n      tabNum: newNum\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AppBar className=\"content\" position=\"sticky\" color=\"default\">\n          <Tabs value={this.state.tabNum} onChange={this.handleTabChange} indicatorColor=\"secondary\" variant=\"fullWidth\">\n            <Tab label=\"Home\" {...this.tabProps(1)} />\n            <Tab label=\"Programming\" {...this.tabProps(2)} />\n            <Tab label=\"Design\" {...this.tabProps(3)} />\n          </Tabs>\n        </AppBar>\n        <SwipeableViews\n          className=\"content\"\n          index={this.state.tabNum}\n          onChangeIndex={this.handleSwipeChange}\n          animateHeight={true}\n          enableMouseEvents>\n          <div>Home</div>\n          <TimelinePage></TimelinePage>\n          <DesignPage></DesignPage>\n        </SwipeableViews>\n        <div id=\"background\"></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}